#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QDebug>

#include "mymodel.h"
#include <QFileDialog>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include<QTextCodec>
#include <QStack>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{

  //  setStyleSheet("background-color:while");
 //   setAutoFillBackground(true);
    ui->setupUi(this);



    this->ui->comboBox->addItem("");
    this->ui->comboBox->addItem("СД");
    this->ui->comboBox->addItem("ИУ");
//    this->ui->comboBox->addItem("ТВ-Камера 'Растр'");
     this->ui->comboBox->addItem("Точка/Гарда");
    //Точка/Гарда

    QVBoxLayout *CD_box_Layout=new QVBoxLayout();

 CD_box_Layout->addWidget(this->ui->CD_label_Num2    );
CD_box_Layout->addWidget(this->ui->CD_label_);
CD_box_Layout->addWidget(this->ui ->CD_label_1  );
CD_box_Layout->addWidget(this->ui->CD_label_2    );
CD_box_Layout->addWidget(this->ui->CD_label_3    );
CD_box_Layout->addWidget(this->ui->CD_label_4    );
CD_box_Layout->addWidget(this->ui->CD_label_5    );


 QVBoxLayout *CD_box_Layout_1=new QVBoxLayout();

 CD_box_Layout_1->addWidget(this->ui->CD_comboBox_Num2);
 CD_box_Layout_1->addWidget(this->ui->CD_radioButton_DK    );


CD_box_Layout_1->addWidget(this->ui->CD_radioButton_Bazalt    );
CD_box_Layout_1->addWidget(this->ui->CD_radioButton_ConnectBlock    );
CD_box_Layout_1->addWidget(this->ui->CD_radioButton_UDP    );

CD_box_Layout_1->addWidget(this->ui->CD_lineEdit_UdpAdress    );
CD_box_Layout_1->addWidget(this->ui->CD_lineEdit_UpdPort    );

QHBoxLayout *CD_H_box_layout=new QHBoxLayout();

CD_H_box_layout->addLayout(CD_box_Layout);
CD_H_box_layout->addLayout(CD_box_Layout_1);

this->ui->CD_groupBox->setLayout(CD_H_box_layout);


QVBoxLayout *IU_box_Layout=new QVBoxLayout();
IU_box_Layout->addWidget(this->ui->IU_label_1);
IU_box_Layout->addWidget(this->ui ->IU_label_2  );
IU_box_Layout->addWidget(this->ui->IU_label_3    );
IU_box_Layout->addWidget(this->ui->IU_label_4    );


QVBoxLayout *IU_box_Layout_1=new QVBoxLayout();
IU_box_Layout_1->addWidget((this->ui->IU_comboBox_UDP));
IU_box_Layout_1->addWidget(this->ui->IU_checkBox_UDP   );
IU_box_Layout_1->addWidget(this->ui->IU_lineEdit_UdpAdress    );

IU_box_Layout_1->addWidget(this->ui->IU_lineEdit_UpdPort    );


QHBoxLayout *IU_H_box_layout=new QHBoxLayout();

IU_H_box_layout->addLayout(IU_box_Layout);
IU_H_box_layout->addLayout(IU_box_Layout_1);

this->ui->IU_groupBox->setLayout(IU_H_box_layout);


for(int i=0;i<99;i++)
{
    this->ui->TG_combobox_adress->addItem(QString::number(i));
}


QVBoxLayout *TG_box_Layout=new QVBoxLayout();
TG_box_Layout->addWidget(this->ui->TG_label);
TG_box_Layout->addWidget(this->ui ->TG_label_2  );
TG_box_Layout->addWidget(this->ui->TG_label_3    );
TG_box_Layout->addWidget(this->ui->TG_label_4    );
TG_box_Layout->addWidget(this->ui->TG_label_5    );
TG_box_Layout->addWidget(this->ui->TG_label_6    );

QVBoxLayout *TG_box_Layout_1=new QVBoxLayout();
TG_box_Layout_1->addWidget(this->ui->TG_combobox_adress  );
TG_box_Layout_1->addWidget(this->ui->TG_combobox_number  );
TG_box_Layout_1->addWidget(this->ui->TG_checkBox_DK  );
TG_box_Layout_1->addWidget(this->ui->TG_checkBox_UDP  );
TG_box_Layout_1->addWidget(this->ui->TG_lineEdit_ipaddr  );
TG_box_Layout_1->addWidget(this->ui->TG_lineEdit_ipport  );

QHBoxLayout *TG_H_box_layout=new QHBoxLayout();

TG_H_box_layout->addLayout(TG_box_Layout);
TG_H_box_layout->addLayout(TG_box_Layout_1);

this->ui->TG_groupBox->setLayout(TG_H_box_layout);







qDebug()<<"stack widget count  "<<this->ui->stackedWidget->count();
int stack_index_1 =this->ui->stackedWidget->addWidget(this->ui->CD_groupBox);
qDebug()<<"stack widget count  "<<this->ui->stackedWidget->count();
int stack_index_2=this->ui->stackedWidget->addWidget(this->ui->IU_groupBox);

qDebug()<<"stack widget count  "<<this->ui->stackedWidget->count();
int stack_index_4=this->ui->stackedWidget->addWidget(this->ui->TG_groupBox);



/*
  QFile file("/home/gleb/EXAMPLE.txt");
  file.open(QIODevice::WriteOnly | QIODevice::Text);
    QTextStream out(&file);
    out << "This file is generated by Qt\n";

    // optional, as QFile destructor will already do it:
    file.close();*/

this->val=true;

    this->current_index=nullptr;

model=new MyModel();

connect(this->model,SIGNAL(dataChanged(QModelIndex,QModelIndex)),
        this, SLOT(expand_all()));

/*
     QFile file(":/default.txt");
      file.open(QIODevice::ReadOnly);
      treemodel=new TreeModel(file.readAll());

      file.close();

      QTreeView *treeView = new QTreeView();
      treeView->setModel(treemodel);
      treeView->setWindowTitle(QObject::tr("Molecules"));
      treeView->show();*/

//    model.data(model.index(0, 0), Qt::DisplayRole);


/*
        qDebug()<<"rowcount: "<<model.rowCount();
        qDebug()<<"colomncount: "<<model.columnCount();

    for(int row=0;row<model.rowCount();row++)
    {
        QVariant data=model.data(model.index(0, row), Qt::EditRole);

        qDebug()<<"data: "<<data.toString();

    }

*/
//
    /*

*/

       this->ui->treeView->setModel(model);
 this->ui->treeView->expandAll();
this->ui->treeView->setColumnHidden(1, true);

 //       this->ui->treeView->setWindowTitle(QObject::tr("Molecules"));
 //      this->ui->treeView->show();

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_treeView_clicked(const QModelIndex &index)
{
    current_index=&index;


QModelIndex ind_name=model->index(index.row(),0,index.parent());
QModelIndex ind_type=model->index(index.row(),1,index.parent());



QString name=model->data(ind_name, Qt::DisplayRole).toString();
int type=model->data(ind_type, Qt::DisplayRole).toInt();

       MyItem *item = static_cast<MyItem*>(index.internalPointer());

if(type==type_CD)
{

    this->ui->CD_radioButton_DK->setChecked(false);


    this->ui->CD_radioButton_Bazalt->setChecked(false);
    this->ui->CD_radioButton_ConnectBlock->setChecked(false);
    this->ui->CD_radioButton_UDP->setChecked(false);

    this->ui->CD_lineEdit_UdpAdress->setText("");
    this->ui->CD_lineEdit_UpdPort->setText("");



    qDebug()<<"type = СД";
 this->ui->comboBox->setCurrentIndex(1);
    this->ui->label->setPixmap(QPixmap(":/icons/СД.png"));
    this->ui->stackedWidget->setCurrentWidget(this->ui->CD_groupBox);



       qDebug()<<"Num2"<<item->Num2  ;
this->ui->CD_comboBox_Num2->setCurrentText(QString::number(item->Num2));

         qDebug()<<"DK"<<item->DK  ;
 this->ui->CD_radioButton_DK->setChecked(item->DK);

  qDebug()<<"Bazalt"<<item->Bazalt  ;
 this->ui->CD_radioButton_Bazalt->setChecked(item->Bazalt);

    qDebug()<<"ConnectBlock"<<item->ConnectBlock  ;
 this->ui->CD_radioButton_ConnectBlock->setChecked(item->ConnectBlock);

      qDebug()<<"UdpUse"<<item->UdpUse  ;
 this->ui->CD_radioButton_UDP->setChecked(item->UdpUse);


      if(item->UdpUse>0)
      {
          qDebug()<<"UdpAdress"<<item->UdpAdress  ;
     this->ui->CD_lineEdit_UdpAdress->setText(item->UdpAdress);

          qDebug()<<"UdpPort"<<item->UdpPort  ;
     this->ui->CD_lineEdit_UpdPort->setText(QString::number(item->UdpPort));

      }

}
if(type==type_IU)
{
this->ui->IU_checkBox_UDP->setChecked(false);
    this->ui->IU_comboBox_UDP->setCurrentIndex(1);
    this->ui->IU_lineEdit_UdpAdress->setText("");
    this->ui->IU_lineEdit_UpdPort->setText("");

    this->ui->stackedWidget->setCurrentWidget(this->ui->IU_groupBox);


    this->ui->IU_comboBox_UDP->setCurrentText(QString::number(item->Num2));
    this->ui->IU_checkBox_UDP->setChecked(item->UdpUse);
    if(item->UdpUse>0)
    {
    this->ui->IU_lineEdit_UdpAdress->setText(item->UdpAdress);
    this->ui->IU_lineEdit_UpdPort->setText(QString::number(item->UdpPort));

    }
}

if(type==type_TG)
{
    this->ui->TG_combobox_adress->setCurrentIndex(1);
            this->ui->TG_combobox_number->setCurrentIndex(1);
            this->ui->TG_checkBox_DK->setChecked(false);
            this->ui->TG_checkBox_UDP->setChecked(false);
            this->ui->TG_lineEdit_ipaddr->setText("");
            this->ui->TG_lineEdit_ipport->setText("");


  this->ui->stackedWidget->setCurrentWidget(this->ui->TG_groupBox);

    this->ui->TG_combobox_adress->setCurrentText(QString::number(item->Num1));
            this->ui->TG_combobox_number->setCurrentText(QString::number(item->Num2));
            this->ui->TG_checkBox_DK->setChecked(item->DK);
            this->ui->TG_checkBox_UDP->setChecked(item->UdpUse);
    if(item->UdpUse>0)
    {
            this->ui->TG_lineEdit_ipaddr->setText(item->UdpAdress);
            this->ui->TG_lineEdit_ipport->setText(QString::number(item->UdpPort));

    }
}
if(item->Name!="System")
this->ui->name_item_to_append->setText(item->Name);


         /*

this->ui->CD_lineEdit_DK->text()   =item->DK;


this->ui->CD_lineEdit_Bazalt->text()   =item->Bazalt;
this->ui->CD_lineEdit_ConnectBlock->text()    =item->ConnectBlock;
this->ui->CD_lineEdit_UdpUse->text()  =item->UdpUse;

this->ui->CD_lineEdit_UdpAdress->text()    =item->UdpAdress;
this->ui->CD_lineEdit_UpdPort->text()   =item->UdpPort;
*/

qDebug()<<name;
qDebug()<<type;




}

void MainWindow::on_pushButton_clicked()
{


    qDebug()<<"treePosition(); "<<this->ui->treeView->treePosition();
    int res=1;


    QModelIndex current=this->ui->treeView->currentIndex();



    if (current_index==nullptr)
    {
        res=0;
    qDebug()<<"no current index!!!";
    }


    QString name=ui->name_item_to_append->text();
  //   QString type=ui->type_item_to_append->text();
     int type=this->Type;

     qDebug()<<name;
      qDebug()<<type;
      if(name=="")
      {
          res=0;
      qDebug()<<"empty name!!";
      }


qDebug()<<"Type: "<<type;

      if(type!=type_CD)

      if(type!=type_IU)

      if(type!=type_TG)
          res=0;






res=this->Get_data();



      qDebug()<<"res "<<res;
      if(1==res)
      {
          MyItem *item=new MyItem(nullptr,name,type,ID::getNextID_real());




          append(model->index(current.row(),0,current.parent()),item);

             change_item( item);










         this->ui->treeView->setCurrentIndex(model->index(current.row(),0,current.parent()));
      }



}











void MainWindow::on_pushButton_2_clicked()
{
    QModelIndex current=this->ui->treeView->currentIndex();
    model->delete_item(model->index(current.row(),0,current.parent()));

}

void MainWindow::on_pushButton_3_clicked()
{

    qDebug()<<"TEST";

    this->model->test();


    //model->load_settings();
    /*
    this->ui->treeView->expandAll();

    if(val)
    {
        val=false;
        this->ui->groupBox->hide();
    }
    else
    {
        val=true;
        this->ui->groupBox->show();
    }
*/
}

void MainWindow::expand_all()
{
    qDebug()<<"expand_all";
    this->ui->treeView->expandAll();

}

void MainWindow::on_treeView_activated(const QModelIndex &index)
{
    qDebug()<<"activated";
}

void MainWindow::on_treeView_entered(const QModelIndex &index)
{
    qDebug()<<"entered";
}

void MainWindow::on_pushButton_4_clicked()
{
    qDebug()<<"ini file path: "<<path;
model->save_settings(path);

}

void MainWindow::on_action_2_triggered()
{
    qDebug()<<"Open";
    this->path=QFileDialog::getOpenFileName(this, "open file","","*.ini");

    qDebug()<<"ini file path: "<<path;


  //  model->load_settings_1(path);
    load_settings(path);

}

void MainWindow::on_action_triggered()
{
   this->path=QFileDialog::getSaveFileName(this, "save file","","*.ini");

   QFile file(path);
   file.open(QIODevice::WriteOnly | QIODevice::Text);
     QTextStream out(&file);
     out << "This file is generated by Qt\n";

     // optional, as QFile destructor will already do it:
     file.close();

     model->save_settings(path);
}























void MainWindow::on_comboBox_currentTextChanged(const QString &arg1)
{
    qDebug()<<"on_comboBox_currentTextChanged(const QString &arg1)";
   QString type=this->ui->comboBox->currentText();
   if(type=="СД")
    this->Type=type_CD;
   if(type=="ИУ")
    this->Type=type_IU;
   if(type=="Точка/Гарда")
    this->Type=type_TG;

this->ui->stackedWidget->setCurrentIndex(0);
   //   this->ui->CD_groupBox->setVisible(false);

    if(this->Type==type_CD)
    {
        this->ui->label->setPixmap(QPixmap(":/icons/СД.png"));
        this->ui->stackedWidget->setCurrentWidget(this->ui->CD_groupBox);
       // this->ui->CD_groupBox->setVisible(true);
    }

   if(this->Type==type_IU)
   {
        this->ui->stackedWidget->setCurrentWidget(this->ui->IU_groupBox);
        this->ui->label->setPixmap(QPixmap(":/icons/ИУ.png"));
}

   if(this->Type==type_TG)
   {
  this->ui->stackedWidget ->setCurrentWidget(this->ui->TG_groupBox);
     this->ui->label->setPixmap(QPixmap(":/icons/Точка-гарда.png"));
   }

/*   if(this->type=="ТВ-Камера 'Растр'")
        this->ui->label->setPixmap(QPixmap(":/icons/камера.png"));

   if(this->type=="Точка-Гарда")
   {
  this->ui->stackedWidget ->setCurrentWidget(this->ui->TG_groupBox);
     this->ui->label->setPixmap(QPixmap(":/icons/Точка-гарда.png"));
   }
*/


  // if(this->type=="Точка/Гарда'")
  //      this->viewPXM=QPixmap(":/icons/Точка-гарда.png");



}

void MainWindow::on_pushButton_change_item_clicked()
{
    qDebug()<<"treePosition(); "<<this->ui->treeView->treePosition();
    int res=1;


    QModelIndex current=this->ui->treeView->currentIndex();



    if (current_index==nullptr)
    {
        res=0;
    qDebug()<<"no current index!!!";
    }


    QString name=ui->name_item_to_append->text();
  //   QString type=ui->type_item_to_append->text();
     int type=this->Type;

     qDebug()<<name;
      qDebug()<<type;
      if(name=="")
      {
          res=0;
      qDebug()<<"empty name!!";
      }

      if(type==0)
      {
       res=0;
      qDebug()<<"empty type!!";
      }
qDebug()<<"Type: "<<type;
      if(type!=11)
      if(type!=12)

          res=0;


   res=this->Get_data();








      qDebug()<<"res "<<res;
      if(1==res)
      {
          MyItem *item = static_cast<MyItem*>(current.internalPointer());



         change_item( item);

       //   model->append_item(model->index(current.row(),0,current.parent()),item);










         this->ui->treeView->setCurrentIndex(model->index(current.row(),0,current.parent()));
      }



}

bool MainWindow::change_item(MyItem *item)
{
    if(Type==type_CD)
    {
        item->Num2=Num2;
        item->DK=DK;
        item->Bazalt=basalt;
      item->ConnectBlock=   connectBlock;
      item->UdpUse=UdpUse;
      if(UdpUse>0)
      {
         item->UdpPort=UdpPort;
         item->UdpAdress=UdpAdress;
      }


    }

    if(Type==type_IU)
    {
        item->Num2=Num2;
        item->UdpUse=UdpUse;
        if(UdpUse>0)
        {
           item->UdpPort=UdpPort;
           item->UdpAdress=UdpAdress;
        }
    }

    if(Type==type_TG)
    {
        item->Num1=Num1;
        item->DK=DK;

        item->Num2=Num2;
        item->UdpUse=UdpUse;
        if(UdpUse>0)
        {
           item->UdpPort=UdpPort;
           item->UdpAdress=UdpAdress;
        }
    }

}

bool MainWindow::Get_data()
{
    if(Type==type_CD)
    {
     return this->Get_CD_data();
      }
    if(Type==type_IU)
        return this->Get_IU_data();

    if(Type==type_TG)
        return this->Get_TG_data();

}





bool MainWindow::Get_CD_data()
{
    Num2=this->ui->CD_comboBox_Num2->currentText().toInt();


    DK=this->ui->CD_radioButton_DK->isChecked();
    basalt=this->ui->CD_radioButton_Bazalt->isChecked();
    connectBlock=this->ui->CD_radioButton_ConnectBlock->isChecked();
    UdpUse=this->ui->CD_radioButton_UDP->isChecked();

      if(UdpUse>0)
      {
          UdpAdress=this->ui->CD_lineEdit_UdpAdress->text();
         qDebug()<<"UdpAdress "<< UdpAdress;
          if(UdpAdress=="")
              return 0;
          UdpPort=this->ui->CD_lineEdit_UpdPort->text().toInt(&ok,10);
          if(ok)
          {
       //       if( connectBlock!=0)
       //            connectBlock=1;
              qDebug()<<"UpdPort "<< UdpPort;

          }
          else
          {
          qDebug()<<"UpdPort  ERROR";
           return 0;
          }


      }
      return 1;
}

bool MainWindow:: Get_IU_data()
{
    this->Num2=this->ui->IU_comboBox_UDP->currentText().toInt();
    this->UdpUse=this->ui->IU_checkBox_UDP->isChecked();
            if(UdpUse>0)
            {
       this->UdpAdress=this->ui->IU_lineEdit_UdpAdress->text();
                if(UdpAdress=="")
                    return 0;
       this->UdpPort=this->ui->IU_lineEdit_UpdPort->text().toInt(&ok,10);
                if(ok)
                {
             //       if( connectBlock!=0)
             //            connectBlock=1;
                    qDebug()<<"UpdPort "<< UdpPort;

                }
                else
                {
                qDebug()<<"UpdPort  ERROR";
                 return 0;
                }
    }
            return 1;

}

bool MainWindow::Get_TG_data()
{
    this->Num1=this->ui->TG_combobox_adress->currentText().toInt();
    this->Num2=this->ui->TG_combobox_number->currentText().toInt();
    this->DK=this->ui->TG_checkBox_DK->isChecked();
    this->UdpUse=this->ui->TG_checkBox_UDP->isChecked();
            if(UdpUse>0)
   {
       this->UdpAdress=this->ui->TG_lineEdit_ipaddr->text();
                if(UdpAdress=="")
                    return 0;
       this->UdpPort=this->ui->TG_lineEdit_ipport->text().toInt(&ok,10);
                if(ok)
                {
             //       if( connectBlock!=0)
             //            connectBlock=1;
                    qDebug()<<"UpdPort "<< UdpPort;

                }
                else
                {
                qDebug()<<"UpdPort  ERROR";
                 return 0;
                }
   }
            return 1;
}

void MainWindow::on_action_3_triggered()
{
    model->save_settings(path);
}

void MainWindow::on_pushButton_5_clicked()
{
    if(this->map.isVisible())
        this->map.hide();
    else
        this->map.show();
}

void MainWindow::on_pushButton_6_clicked()
{

}

void MainWindow::append(QModelIndex index, MyItem *item)
{

    model->append_item(index,item);
    map.Add(item->ID);


}

bool MainWindow::load_settings(QString ini_file)
{
    qDebug()<<"=============================== ";
     qDebug()<<"= ";
     qDebug()<<"= ";
     qDebug()<<"=      load_settingd_1";
     qDebug()<<"= ";
     qDebug()<<"= ";
     qDebug()<<"============================== ";
    model->rootItem->m_child_list.clear();
    MyItem *item = new MyItem(nullptr);
    item->Name="System";
    item->Type=800;
    model->rootItem->m_child_list.append(item);

    item->m_parent=model->rootItem;


   // QSettings settings("/home/gleb/MyTree/rifx.ini",QSettings::IniFormat);
    QSettings settings(ini_file,QSettings::IniFormat);

     settings.setIniCodec(QTextCodec::codecForLocale() );
    settings.beginGroup("TREE");
    int count=settings.value("Count",-1).toInt();
    qDebug()<<"device count: "<<count;
    settings.endGroup();

    if(0>=count)
        return 0;






    QModelIndex ind=model->index(0,0);
    qDebug()<<"DATA..."<<model->data(ind,Qt::DisplayRole).toString();


    /*
    QStringList ls_childgroup=settings.childGroups();
    for(int i=0;i<ls_childgroup.count();i++)
        qDebug()<<ls_childgroup.at(i);
    */



    QList<MyItem> ls_item;

    QStack<int> st_current;
    int current=0;
    QStack<int> st_vsego;
    int vsego=count;
    int child_cnt=0;
    int cnt=0;
    int deep=0;

    for(int index=0;index<count;index++)
    {
        qDebug()<<("----------------");
        QString strGroup("Obj_%1");

        strGroup=strGroup.arg(index+1);
        qDebug()<<strGroup;
    //    qDebug()<<strGroup;
    //    qDebug()<<"==================";
        if(settings.childGroups().contains(strGroup))
        {
            settings.beginGroup(strGroup);




            QString name=settings.value("Name", -1).toString();
            int Type=settings.value("Type", -1).toInt();



            MyItem *tmpItem = new MyItem(nullptr,name,Type,ID::getNextID_real());

            child_cnt=0;
            child_cnt=settings.value("Count", -1).toInt();

            qDebug()<<"name   "<< tmpItem->Name  ;
        //    qDebug()<<"type   "<< tmpItem->type  ;

            if(Type==type_CD)
            {
                tmpItem->Num2=settings.value("Num2", -1).toInt();
                tmpItem->DK=settings.value("DK", -1).toInt();
                tmpItem->Bazalt=settings.value("Bazalt", -1).toInt();
                tmpItem->ConnectBlock=settings.value("ConnectBlock", -1).toInt();
                tmpItem->UdpUse=settings.value("UdpUse", -1).toInt();
                if(tmpItem->UdpUse>0)
                {
                    tmpItem->UdpAdress=settings.value("UdpAdress", -1).toString();
                    tmpItem->UdpPort=settings.value("UdpPort", -1).toInt();
                }

            }

            if(Type==type_IU)
            {
                tmpItem->Num2=settings.value("Num2", -1).toInt();

                tmpItem->UdpUse=settings.value("UdpUse", -1).toInt();
                if(tmpItem->UdpUse>0)
                {
                    tmpItem->UdpAdress=settings.value("UdpAdress", -1).toString();
                    tmpItem->UdpPort=settings.value("UdpPort", -1).toInt();
                }

            }
            if(Type==type_TG)
            {
                tmpItem->Num1=settings.value("Num1", -1).toInt();
                tmpItem->Num2=settings.value("Num2", -1).toInt();
 tmpItem->DK=settings.value("DK", -1).toInt();
                tmpItem->UdpUse=settings.value("UdpUse", -1).toInt();
                if(tmpItem->UdpUse>0)
                {
                    tmpItem->UdpAdress=settings.value("UdpAdress", -1).toString();
                    tmpItem->UdpPort=settings.value("UdpPort", -1).toInt();
                }

            }
         //   qDebug()<<"cnt   "<< cnt  ;


            if(!tmpItem->Name.isEmpty())
            {

                append(ind,tmpItem); //надо не добавлять по одиночке к руту
                current++;
            }

            if(deep>0)
            {
                qDebug()<<"deep "<<deep;

                qDebug()<<"is "<<current<<" from "<<vsego;

            }

            if(child_cnt>0)
            {
                //go to child
                ind=model->index(model->rowCount(ind)-1,0,ind);

                st_current.push(current);
                current=0;


                st_vsego.push(vsego);
                vsego=child_cnt;

                deep++;

            }
            else
            {




             int const_deep=deep;

             for(int i=0;i<const_deep;i++)
             {
               if((current==vsego)&&(deep>0))
               {
                  qDebug()<<"The Last and no children";
                   current=st_current.top();
                   st_current.pop();
                   vsego=st_vsego.top();
                   st_vsego.pop();
                   ind=model->parent(ind);
                   deep--;

               }


             }




            }


/*

            if(!tmpItem->name.isEmpty())
            {

                this->append_item(ind,tmpItem); //надо не добавлять по одиночке к руту


                if(deep>0)
                {
                 int deep_const=deep;


                for(int i=0;i<deep_const;i++)
                {
                    if(deep>0)
                    {
                  //  child_cnt--;


                    if(0>child_cnt)
                        {
                            ind=this->parent(ind);
                            child_cnt=st_cnt.top();
                            st_cnt.pop();
                            deep--;
                            if(child_cnt>0)
                            child_cnt--;
                        }
                    }

                }
                qDebug()<<"deep "<<deep;
                }

                                                //надо собрать дерево и записать указатель на дерево в переменную рута.
            }
            else
                {
                qDebug()<<"tmpItem->name.isEmpty()";
                }

            if (child_cnt>0)
            {


                qDebug()<<"!!! have a child: "<<cnt;


                ind=this->index(this->rowCount(ind)-1,0,ind);
                child_cnt=st_cnt.top();
                deep++;
            }







                */
            settings.endGroup();

        }

    }

}


